name: Deploy to Target Org

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Validation job for feature branches
  validate:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for comparison
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Salesforce CLI
        run: npm install --global @salesforce/cli
      
      - name: Install PMD
        run: |
          wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F6.55.0/pmd-bin-6.55.0.zip
          unzip pmd-bin-6.55.0.zip
          echo "${{ github.workspace }}/pmd-bin-6.55.0/bin" >> $GITHUB_PATH
      
      - name: Authenticate to Target Org
        run: echo "${{ secrets.SF_AUTH_URL }}" > auth.txt && sf org login sfdx-url --sfdx-url-file auth.txt -a TargetOrg
      
      - name: Compare changes with master branch
        run: |
          echo "## Changed Files" >> $GITHUB_STEP_SUMMARY
          git diff --name-only origin/main...HEAD | tee changed_files.txt
          echo "### Files modified in this PR:" >> $GITHUB_STEP_SUMMARY
          while read file; do
            echo "- $file" >> $GITHUB_STEP_SUMMARY
          done < changed_files.txt
      
      - name: Check for merge conflicts
        run: |
          git merge-tree $(git merge-base origin/main HEAD) origin/main HEAD | grep -q "<<<<<<< " && {
            echo "❌ Merge conflicts detected!"
            echo "::error::Merge conflicts found. Please resolve conflicts before deployment."
            exit 1
          } || echo "✅ No merge conflicts detected"
      
      - name: Generate deployment package for changed files only
        run: |
          cd salesforce-deployment
          # Create a temporary package.xml with only changed files
          sf project generate manifest --from-org TargetOrg --name temp-package
          
          # Filter package.xml to include only changed files
          python3 << EOF
          import xml.etree.ElementTree as ET
          import os
          
          # Read changed files
          with open('../changed_files.txt', 'r') as f:
              changed_files = [line.strip() for line in f.readlines()]
          
          # Parse package.xml
          tree = ET.parse('manifest/temp-package.xml')
          root = tree.getroot()
          
          # Filter types based on changed files
          for type_elem in root.findall('.//{http://soap.sforce.com/2006/04/metadata}types'):
              members = type_elem.findall('.//{http://soap.sforce.com/2006/04/metadata}members')
              for member in members:
                  member_name = member.text
                  # Check if any changed file relates to this member
                  should_keep = any(member_name in changed_file for changed_file in changed_files)
                  if not should_keep:
                      type_elem.remove(member)
          
          # Save filtered package
          tree.write('manifest/package-delta.xml')
          EOF
      
      - name: Run PMD Code Analysis
        run: |
          cd salesforce-deployment
          pmd -d force-app/main/default -R category/apex/bestpractices.xml,category/apex/errorprone.xml,category/apex/performance.xml,category/apex/security.xml -f text -r pmd-report.txt || true
          
          if [ -s pmd-report.txt ]; then
            echo "## PMD Code Analysis Results" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -50 pmd-report.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Validate deployment (dry-run)
        run: |
          cd salesforce-deployment
          sf project deploy validate --manifest manifest/package-delta.xml --target-org TargetOrg --verbose
      
      - name: Run Apex Tests
        run: |
          cd salesforce-deployment
          sf apex run test --target-org TargetOrg --code-coverage --result-format human --wait 10

  # Deployment job for main branch
  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Salesforce CLI
        run: npm install --global @salesforce/cli
      
      - name: Authenticate to Target Org
        run: echo "${{ secrets.SF_AUTH_URL }}" > auth.txt && sf org login sfdx-url --sfdx-url-file auth.txt -a TargetOrg
      
      - name: Get changed files since last deployment
        run: |
          # Get changes since last successful deployment
          LAST_DEPLOY_SHA=$(git log --grep="Deployment successful" --format="%H" -n 1)
          if [ -z "$LAST_DEPLOY_SHA" ]; then
            echo "No previous deployment found, deploying all files"
            git diff --name-only HEAD~1 HEAD > changed_files.txt || git ls-files > changed_files.txt
          else
            git diff --name-only $LAST_DEPLOY_SHA HEAD > changed_files.txt
          fi
          
          echo "Files to be deployed:"
          cat changed_files.txt
      
      - name: Generate delta deployment package
        run: |
          cd salesforce-deployment
          # Similar logic as validation job to create delta package
          sf project generate manifest --from-org TargetOrg --name temp-package
          
          python3 << EOF
          import xml.etree.ElementTree as ET
          
          with open('../changed_files.txt', 'r') as f:
              changed_files = [line.strip() for line in f.readlines()]
          
          tree = ET.parse('manifest/temp-package.xml')
          root = tree.getroot()
          
          for type_elem in root.findall('.//{http://soap.sforce.com/2006/04/metadata}types'):
              members = type_elem.findall('.//{http://soap.sforce.com/2006/04/metadata}members')
              for member in members:
                  member_name = member.text
                  should_keep = any(member_name in changed_file for changed_file in changed_files)
                  if not should_keep:
                      type_elem.remove(member)
          
          tree.write('manifest/package-delta.xml')
          EOF
      
      - name: Deploy metadata (delta deployment)
        run: |
          cd salesforce-deployment
          sf project deploy start --manifest manifest/package-delta.xml --target-org TargetOrg --wait 10
      
      - name: Create deployment backup
        if: success()
        run: |
          # Create a backup of deployed components
          cd salesforce-deployment
          sf project retrieve start --manifest manifest/package-delta.xml --target-org TargetOrg --output-dir backup/$(date +%Y%m%d_%H%M%S)
      
      - name: Commit deployment success marker
        if: success()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit --allow-empty -m "Deployment successful - $(date)"
          git push
      
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Deployment completed successfully"
          else
            echo "❌ Deployment failed"
          fi

  # Rollback job (manual trigger)
  rollback:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Salesforce CLI
        run: npm install --global @salesforce/cli
      
      - name: Authenticate to Target Org
        run: echo "${{ secrets.SF_AUTH_URL }}" > auth.txt && sf org login sfdx-url --sfdx-url-file auth.txt -a TargetOrg
      
      - name: Rollback deployment
        run: |
          cd salesforce-deployment
          # Find latest backup
          LATEST_BACKUP=$(ls -t backup/ | head -n1)
          if [ -n "$LATEST_BACKUP" ]; then
            echo "Rolling back to: $LATEST_BACKUP"
            sf project deploy start --source-dir backup/$LATEST_BACKUP --target-org TargetOrg
          else
            echo "No backup found for rollback"
            exit 1
          fi
